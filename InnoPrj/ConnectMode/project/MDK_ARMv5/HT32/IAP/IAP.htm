<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\IAP\IAP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\IAP\IAP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Aug 20 22:58:46 2020
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_IAP_External_Flash &rArr; QSPI_FLASH_BYTE_QPP &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[54]">delayXuS</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">delayXuS</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[e]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">MIDI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">QSPI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2f]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">SCTM2_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SERIAL_USBDClass_RXHandler</a> from ht32_serial.o(i.SERIAL_USBDClass_RXHandler) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[23]">SERIAL_USBDClass_Request</a> from ht32_serial.o(i.SERIAL_USBDClass_Request) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_ht32f0006.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">USART0_IRQHandler</a> from iap_uart.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">USB_IRQHandler</a> from ht32_serial.o(i.USB_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2b]">_IAP_CMD0</a> from iap_handler.o(i._IAP_CMD0) referenced from iap_handler.o(.constdata)
 <LI><a href="#[28]">_IAP_CRC</a> from iap_handler.o(i._IAP_CRC) referenced from iap_handler.o(.constdata)
 <LI><a href="#[29]">_IAP_CRC_FLASH</a> from iap_handler.o(i._IAP_CRC_FLASH) referenced from iap_handler.o(.constdata)
 <LI><a href="#[25]">_IAP_Erase</a> from iap_handler.o(i._IAP_Erase) referenced from iap_handler.o(.constdata)
 <LI><a href="#[2d]">_IAP_Exit</a> from iap_handler.o(i._IAP_Exit) referenced from iap_handler.o(.constdata)
 <LI><a href="#[27]">_IAP_External_Flash</a> from iap_handler.o(i._IAP_External_Flash) referenced from iap_handler.o(.constdata)
 <LI><a href="#[26]">_IAP_Flash</a> from iap_handler.o(i._IAP_Flash) referenced from iap_handler.o(.constdata)
 <LI><a href="#[2e]">_IAP_GetBootMode</a> from iap_handler.o(i._IAP_GetBootMode) referenced from iap_handler.o(.constdata)
 <LI><a href="#[2a]">_IAP_Info</a> from iap_handler.o(i._IAP_Info) referenced from iap_handler.o(.constdata)
 <LI><a href="#[2c]">_IAP_Reset</a> from iap_handler.o(i._IAP_Reset) referenced from iap_handler.o(.constdata)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[13]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[15]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1a]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[36]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[17]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[f]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[3a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[3b]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ad]"></a>IAP_GoCMD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iap_handler.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Info
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Flash
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>AFIO_GPxConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[99]"></a>BFTM_OneShotModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_OneShotModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[98]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[9a]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[aa]"></a>Buffer_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buffer.o(i.Buffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_uart_Configuration
</UL>

<P><STRONG><a name="[43]"></a>Buffer_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, buffer.o(i.Buffer_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Get
</UL>

<P><STRONG><a name="[44]"></a>Buffer_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buffer.o(i.Buffer_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
</UL>

<P><STRONG><a name="[46]"></a>Buffer_Write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, buffer.o(i.Buffer_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
</UL>

<P><STRONG><a name="[47]"></a>Buffer_WriteByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buffer.o(i.Buffer_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[42]"></a>CRC16</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC16 &rArr; _crc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_CRC_FLASH
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_CRC
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
</UL>

<P><STRONG><a name="[49]"></a>FLASH_ErasePage</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Erase
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_GetOptionByteStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ht32f5xxxx_flash.o(i.FLASH_GetOptionByteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_GetOptionByteStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Flash
</UL>

<P><STRONG><a name="[4b]"></a>FLASH_ProgramWordData</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_flash.o(i.FLASH_ProgramWordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ProgramWordData &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Flash
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_CRC
</UL>

<P><STRONG><a name="[95]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[97]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FLASH_WaitForOperationEnd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ht32f5xxxx_flash.o(i.FLASH_WaitForOperationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[96]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
</UL>

<P><STRONG><a name="[4c]"></a>IAP_Handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, iap_handler.o(i.IAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IAP_Handler &rArr; ParseCmd &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>IAP_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, iap_handler.o(i.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IAP_Init &rArr; QSPI_FLASH_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_RDID
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_uart_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>IAP_UART_Get</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, iap_uart.o(i.IAP_UART_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = IAP_UART_Get &rArr; Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayXuS
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[55]"></a>IAP_UART_Send</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, iap_uart.o(i.IAP_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[ab]"></a>IAP_isAPValid</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, iap_handler.o(i.IAP_isAPValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IAP_isAPValid
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>QSPI_FLASH_BYTE_QOR</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_BYTE_QOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_FLASH_BYTE_QOR &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_External_Flash
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_CRC_FLASH
</UL>

<P><STRONG><a name="[5c]"></a>QSPI_FLASH_BYTE_QPP</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_BYTE_QPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QSPI_FLASH_BYTE_QPP &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WriteEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_External_Flash
</UL>

<P><STRONG><a name="[5f]"></a>QSPI_FLASH_ChipErase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_ChipErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_FLASH_ChipErase &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WriteEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Erase
</UL>

<P><STRONG><a name="[50]"></a>QSPI_FLASH_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = QSPI_FLASH_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[51]"></a>QSPI_FLASH_RDID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_RDID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_FLASH_RDID &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[65]"></a>QSPI_FLASH_SE</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_SE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_FLASH_SE &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WriteEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Erase
</UL>

<P><STRONG><a name="[52]"></a>QSPI_FLASH_WRR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qspi_flash_mx25l12835f.o(i.QSPI_FLASH_WRR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_FLASH_WRR &rArr; _QSPI_FLASH_WaitForWriteEnd &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WREN
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[67]"></a>RETARGET_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32_retarget.o(i.RETARGET_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RETARGET_Configuration &rArr; SERIAL_USBDInit &rArr; USBDCore_MainRoutine &rArr; _USBDCore_PowerHandler &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>RSTCU_PeripReset</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, ht32f5xxxx_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DeInit
</UL>

<P><STRONG><a name="[57]"></a>SERIAL_Flush</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SERIAL_Flush &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>

<P><STRONG><a name="[56]"></a>SERIAL_PutChar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ht32_serial.o(i.SERIAL_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>

<P><STRONG><a name="[24]"></a>SERIAL_USBDClass_RXHandler</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, ht32_serial.o(i.SERIAL_USBDClass_RXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SERIAL_USBDClass_RXHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[23]"></a>SERIAL_USBDClass_Request</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, ht32_serial.o(i.SERIAL_USBDClass_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SERIAL_USBDClass_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[68]"></a>SERIAL_USBDInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_USBDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SERIAL_USBDInit &rArr; USBDCore_MainRoutine &rArr; _USBDCore_PowerHandler &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDesc_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
</UL>

<P><STRONG><a name="[64]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[9d]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[62]"></a>SPI_Init</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ht32f5xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[9f]"></a>SPI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[63]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[9e]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[5a]"></a>SPI_SoftwareSELCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SoftwareSELCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WriteEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WREN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_RDID
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ChipErase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QPP
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QOR
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, system_ht32f0006.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>USART0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iap_uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART0_IRQHandler &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USBDClass_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32_serial.o(i.USBDClass_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[71]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBDCore_IRQHandler &rArr; _USBDCore_ControlOUT &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Suspend
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Resume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlOUT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>USBDCore_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32_usbd_core.o(i.USBDCore_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[70]"></a>USBDCore_MainRoutine</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32_usbd_core.o(i.USBDCore_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDCore_MainRoutine &rArr; _USBDCore_PowerHandler &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_PowerHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[6c]"></a>USBDDesc_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_serial.o(i.USBDDesc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[73]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>USBD_DPWakeUpCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_DPWakeUpCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[6f]"></a>USBD_DPpullupCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_DPpullupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[80]"></a>USBD_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Reset
</UL>

<P><STRONG><a name="[82]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[84]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[7a]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[86]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[87]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[88]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[77]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[89]"></a>USBD_EPTInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetConfiguration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Reset
</UL>

<P><STRONG><a name="[8b]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[6b]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlOUT
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
</UL>

<P><STRONG><a name="[8a]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[8d]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[8e]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[6a]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlOUT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
</UL>

<P><STRONG><a name="[91]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Reset
</UL>

<P><STRONG><a name="[7d]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>USBD_GetINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>USBD_Init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ht32f5xxxx_usbd.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
</UL>

<P><STRONG><a name="[a9]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Suspend
</UL>

<P><STRONG><a name="[a0]"></a>USBD_PowerOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Resume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Reset
</UL>

<P><STRONG><a name="[90]"></a>USBD_PowerUp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPWakeUpCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_PowerHandler
</UL>

<P><STRONG><a name="[8f]"></a>USBD_PreInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PreInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[78]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetAddress
</UL>

<P><STRONG><a name="[94]"></a>USB_Detect_Init</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, usb_detect.o(i.USB_Detect_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_Detect_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_OneShotModeCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>USB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ht32_serial.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; _USBDCore_ControlOUT &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>WDT_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_wdt.o(i.WDT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WDT_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>_QSPI_FLASH_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qspi_flash_mx25l12835f.o(i._QSPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WriteEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_WREN
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SE
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_RDID
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ChipErase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QPP
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QOR
</UL>

<P><STRONG><a name="[66]"></a>_QSPI_FLASH_WREN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, qspi_flash_mx25l12835f.o(i._QSPI_FLASH_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _QSPI_FLASH_WREN &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
</UL>

<P><STRONG><a name="[5e]"></a>_QSPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qspi_flash_mx25l12835f.o(i._QSPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _QSPI_FLASH_WaitForWriteEnd &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ChipErase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QPP
</UL>

<P><STRONG><a name="[5d]"></a>_QSPI_FLASH_WriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, qspi_flash_mx25l12835f.o(i._QSPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareSELCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ChipErase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QPP
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ba]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>iap_uart_Configuration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iap_uart.o(i.iap_uart_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iap_uart_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; IAP_Handler &rArr; ParseCmd &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_DeInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Detect_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_isAPValid
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GoCMD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[54]"></a>delayXuS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iap_uart.o(i.delayXuS))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayXuS
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayXuS
</UL>

<P><STRONG><a name="[48]"></a>_crc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, crc16.o(i._crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _crc
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>

<P><STRONG><a name="[40]"></a>AdjustReturnPackage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iap_handler.o(i.AdjustReturnPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AdjustReturnPackage &rArr; CRC16 &rArr; _crc
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateHeaderCheckSum
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[41]"></a>CalculateHeaderCheckSum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, iap_handler.o(i.CalculateHeaderCheckSum))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
</UL>

<P><STRONG><a name="[4e]"></a>ParseCmd</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, iap_handler.o(i.ParseCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ParseCmd &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[2b]"></a>_IAP_CMD0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_CMD0))
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>_IAP_CRC</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, iap_handler.o(i._IAP_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _IAP_CRC &rArr; CRC16 &rArr; _crc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>_IAP_CRC_FLASH</STRONG> (Thumb, 82 bytes, Stack size 288 bytes, iap_handler.o(i._IAP_CRC_FLASH))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _IAP_CRC_FLASH &rArr; QSPI_FLASH_BYTE_QOR &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QOR
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>_IAP_Erase</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, iap_handler.o(i._IAP_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _IAP_Erase &rArr; QSPI_FLASH_SE &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ChipErase
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>_IAP_Exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _IAP_Exit &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>_IAP_External_Flash</STRONG> (Thumb, 168 bytes, Stack size 288 bytes, iap_handler.o(i._IAP_External_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _IAP_External_Flash &rArr; QSPI_FLASH_BYTE_QPP &rArr; _QSPI_FLASH_WriteEnable &rArr; _QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QPP
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_BYTE_QOR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>_IAP_Flash</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, iap_handler.o(i._IAP_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _IAP_Flash &rArr; FLASH_ProgramWordData &rArr; FLASH_WaitForOperationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetOptionByteStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>_IAP_GetBootMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_GetBootMode))
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>_IAP_Info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iap_handler.o(i._IAP_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _IAP_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>_IAP_Reset</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _IAP_Reset &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[7c]"></a>_USBDCore_ControlOUT</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _USBDCore_ControlOUT &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>_USBDCore_PowerHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_PowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_PowerHandler &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
</UL>

<P><STRONG><a name="[75]"></a>_USBDCore_Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _USBDCore_Reset &rArr; USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>_USBDCore_Resume</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _USBDCore_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>_USBDCore_Setup</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _USBDCore_Setup &rArr; _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>_USBDCore_Standard_GetConfiguration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[a6]"></a>_USBDCore_Standard_GetDescriptor</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _USBDCore_Standard_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[a2]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[a1]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USBDCore_Standard_Request &rArr; _USBDCore_Standard_SetConfiguration &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetConfiguration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetAddress
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetDescriptor
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[a5]"></a>_USBDCore_Standard_SetAddress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _USBDCore_Standard_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[a3]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[a7]"></a>_USBDCore_Standard_SetConfiguration</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_SetConfiguration &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[74]"></a>_USBDCore_Suspend</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _USBDCore_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>BootProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>_USBD_CopyMemory</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, ht32f5xxxx_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[83]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
</UL>

<P><STRONG><a name="[93]"></a>_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i._delay))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
