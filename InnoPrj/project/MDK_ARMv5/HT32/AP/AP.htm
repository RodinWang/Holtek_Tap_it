<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\AP\AP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\AP\AP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Nov 21 10:32:14 2020
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TapModeProcess &rArr; QueueProcess &rArr; BeatLEDControl &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from adc.o(i.ADC_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">BFTM0_IRQHandler</a> from ht32f5xxxx_01_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM1_IRQHandler</a> from urbus.o(i.BFTM1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from power.o(i.EVWUP_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[e]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">MIDI_IRQHandler</a> from ht32f5xxxx_01_it.o(i.MIDI_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">PDMA_CH0_1_IRQHandler</a> from ht32f5xxxx_01_it.o(i.PDMA_CH0_1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">PDMA_CH2_5_IRQHandler</a> from ht32f5xxxx_01_it.o(i.PDMA_CH2_5_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">QSPI_IRQHandler</a> from ht32f5xxxx_01_it.o(i.QSPI_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2b]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">SCTM0_IRQHandler</a> from sys_timer.o(i.SCTM0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">SCTM1_IRQHandler</a> from sys_timer.o(i.SCTM1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">SCTM2_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SERIAL_USBDClass_RXHandler</a> from ht32_serial.o(i.SERIAL_USBDClass_RXHandler) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[23]">SERIAL_USBDClass_Request</a> from ht32_serial.o(i.SERIAL_USBDClass_Request) referenced from ht32_serial.o(i.USBDClass_Init)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_ht32f0006.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from urbus.o(i.UART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">USART0_IRQHandler</a> from urbus.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">USB_IRQHandler</a> from ht32_serial.o(i.USB_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[28]">_IAP_CMD0</a> from iap_handler.o(i._IAP_CMD0) referenced from iap_handler.o(.constdata)
 <LI><a href="#[26]">_IAP_CMD_ERR</a> from iap_handler.o(i._IAP_CMD_ERR) referenced 6 times from iap_handler.o(.constdata)
 <LI><a href="#[2a]">_IAP_GetBootMode</a> from iap_handler.o(i._IAP_GetBootMode) referenced from iap_handler.o(.constdata)
 <LI><a href="#[27]">_IAP_Info</a> from iap_handler.o(i._IAP_Info) referenced from iap_handler.o(.constdata)
 <LI><a href="#[29]">_IAP_Reset</a> from iap_handler.o(i._IAP_Reset) referenced from iap_handler.o(.constdata)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[2c]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[15]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[30]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[32]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[33]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[11]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[36]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[37]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[38]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[190]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByteExt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM1_IRQHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_TEMPO_Config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Pitch_Wheel
</UL>

<P><STRONG><a name="[189]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Info
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Set_Name
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_write_phy_pkg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_ctrl_cmd_pkg
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Set_Name
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Set_Name
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_rcv_packet_parser
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SPI_process
</UL>

<P><STRONG><a name="[197]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_param_configure
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_read_phy_pkg
</UL>

<P><STRONG><a name="[199]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[45]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>ADC_IntConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[cf]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[cd]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ht32f5xxxx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[cc]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[ce]"></a>ADC_SamplingTimeConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_adc.o(i.ADC_SamplingTimeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[51]"></a>AFIO_GPxConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_GPIOConfiguration
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
</UL>

<P><STRONG><a name="[49]"></a>BC76XX_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bc76xx.o(i.BC76XX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BC76XX_Init &rArr; BC76xx_interface_configure &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_param_configure
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_up
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_save
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>BC76xxSPI_read_fifo</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bc76xx.o(i.BC76xxSPI_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BC76xxSPI_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SPI_process
</UL>

<P><STRONG><a name="[73]"></a>BC76xxSPI_read_register</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bc76xx.o(i.BC76xxSPI_read_register))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IsConnected
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SPI_process
</UL>

<P><STRONG><a name="[57]"></a>BC76xxSPI_write_fifo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bc76xx.o(i.BC76xxSPI_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BC76xxSPI_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Set_Name
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLESetupInterval
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLESetWhiteList
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_multibyte_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Test
</UL>

<P><STRONG><a name="[83]"></a>BC76xx_get_extint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bc76xx.o(i.BC76xx_get_extint))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[7f]"></a>BC76xx_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bc76xx.o(i.BC76xx_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_save
</UL>

<P><STRONG><a name="[4b]"></a>BC76xx_interface_configure</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, bc76xx.o(i.BC76xx_interface_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BC76xx_interface_configure &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
</UL>

<P><STRONG><a name="[56]"></a>BC76xx_multibyte_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bc76xx.o(i.BC76xx_multibyte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_write_fifo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
</UL>

<P><STRONG><a name="[59]"></a>BC76xx_power_mode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bc76xx.o(i.BC76xx_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BC76xx_power_mode &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_save
</UL>

<P><STRONG><a name="[5a]"></a>BC76xx_rcv_packet_parser</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, bc76xx.o(i.BC76xx_rcv_packet_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BC76xx_rcv_packet_parser
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[5c]"></a>BC76xx_send_ctrl_cmd_pkg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bc76xx.o(i.BC76xx_send_ctrl_cmd_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BC76xx_send_ctrl_cmd_pkg &rArr; BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[5f]"></a>BC76xx_send_data_pkg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bc76xx.o(i.BC76xx_send_data_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BC76xx_send_data_pkg &rArr; BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[5e]"></a>BC76xx_send_packet</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bc76xx.o(i.BC76xx_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_multibyte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_write_phy_pkg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_read_phy_pkg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_read_info_pkg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_data_pkg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_ctrl_cmd_pkg
</UL>

<P><STRONG><a name="[60]"></a>BC76xx_send_read_info_pkg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bc76xx.o(i.BC76xx_send_read_info_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BC76xx_send_read_info_pkg &rArr; BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[61]"></a>BC76xx_send_read_phy_pkg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bc76xx.o(i.BC76xx_send_read_phy_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BC76xx_send_read_phy_pkg &rArr; BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[63]"></a>BC76xx_send_write_phy_pkg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bc76xx.o(i.BC76xx_send_write_phy_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BC76xx_send_write_phy_pkg &rArr; BC76xx_send_packet &rArr; BC76xx_multibyte_write &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_packet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[7e]"></a>BC76xx_wakeup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bc76xx.o(i.BC76xx_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_save
</UL>

<P><STRONG><a name="[13]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_TimerInterrupt_2ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, urbus.o(i.BFTM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>BFTM1_TEMPO_Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(i.BFTM1_TEMPO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BFTM1_TEMPO_Config &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Tempo
</UL>

<P><STRONG><a name="[65]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>BFTM_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer.o(i.BFTM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BFTM_Config &rArr; BFTM1_TEMPO_Config &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_TEMPO_Config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[6d]"></a>BFTM_EnaCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[6c]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[139]"></a>BFTM_OneShotModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_OneShotModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[6a]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[6b]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
</UL>

<P><STRONG><a name="[6e]"></a>BLESetWhiteList</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(i.BLESetWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLESetWhiteList &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CustomInit
</UL>

<P><STRONG><a name="[6f]"></a>BLESetupInterval</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(i.BLESetupInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLESetupInterval &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CustomInit
</UL>

<P><STRONG><a name="[70]"></a>BLE_CustomInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.BLE_CustomInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLE_CustomInit &rArr; SetBLEName &rArr; BLE_Set_Name &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBLEName
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLESetupInterval
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLESetWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>BLE_IsConnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.BLE_IsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_IsConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>BLE_Power_Down</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bleuser.o(i.BLE_Power_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BLE_Power_Down &rArr; BLE_enter_power_save &rArr; BC76xx_power_mode &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_param_configure
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_save
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>BLE_Power_Up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bleuser.o(i.BLE_Power_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_Power_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Discard
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_enter_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>BLE_Read_Buffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bleuser.o(i.BLE_Read_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BLE_Read_Buffer &rArr; Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>BLE_SPI_process</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bleprocess.o(i.BLE_SPI_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BLE_SPI_process &rArr; BC76xxSPI_read_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_read_register
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_read_fifo
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[7b]"></a>BLE_Set_Name</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bleuser.o(i.BLE_Set_Name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BLE_Set_Name &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_write_fifo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBLEName
</UL>

<P><STRONG><a name="[7d]"></a>BLE_Test</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bleuser.o(i.BLE_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLE_Test &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xxSPI_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_event_parser
</UL>

<P><STRONG><a name="[4d]"></a>BLE_enter_power_save</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bleprocess.o(i.BLE_enter_power_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BLE_enter_power_save &rArr; BC76xx_power_mode &rArr; delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_wakeup
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_power_mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Down
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
</UL>

<P><STRONG><a name="[4f]"></a>BLE_enter_power_up</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bleprocess.o(i.BLE_enter_power_up))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Up
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
</UL>

<P><STRONG><a name="[80]"></a>BLE_event_parser</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bleprocess.o(i.BLE_event_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLE_event_parser &rArr; BLE_Test &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[4c]"></a>BLE_param_configure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bleprocess.o(i.BLE_param_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_param_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Down
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
</UL>

<P><STRONG><a name="[81]"></a>BLE_process</STRONG> (Thumb, 1098 bytes, Stack size 24 bytes, bleprocess.o(i.BLE_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BLE_process &rArr; Buffer_WriteExt &rArr; Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteExt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_wakeup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_write_phy_pkg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_read_phy_pkg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_read_info_pkg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_data_pkg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_send_ctrl_cmd_pkg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_rcv_packet_parser
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_power_mode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_get_extint
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_timer_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_event_parser
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SPI_process
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>BLE_timer_process</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bleprocess.o(i.BLE_timer_process))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[86]"></a>BeatLEDControl</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, main.o(i.BeatLEDControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BeatLEDControl &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>

<P><STRONG><a name="[76]"></a>Buffer_Discard</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buffer.o(i.Buffer_Discard))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Up
</UL>

<P><STRONG><a name="[50]"></a>Buffer_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buffer.o(i.Buffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
</UL>

<P><STRONG><a name="[78]"></a>Buffer_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, buffer.o(i.Buffer_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Retval
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Read_Buffer
</UL>

<P><STRONG><a name="[8b]"></a>Buffer_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buffer.o(i.Buffer_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
</UL>

<P><STRONG><a name="[8c]"></a>Buffer_ReadByteExt</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, buffer.o(i.Buffer_ReadByteExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Buffer_ReadByteExt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Lenth
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
</UL>

<P><STRONG><a name="[8e]"></a>Buffer_Write</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, buffer.o(i.Buffer_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteExt
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
</UL>

<P><STRONG><a name="[8f]"></a>Buffer_WriteByte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buffer.o(i.Buffer_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
</UL>

<P><STRONG><a name="[85]"></a>Buffer_WriteExt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, buffer.o(i.Buffer_WriteExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Buffer_WriteExt &rArr; Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>

<P><STRONG><a name="[93]"></a>CKCU_Configuration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key_func.o(i.CKCU_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_Configuration &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
</UL>

<P><STRONG><a name="[94]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[95]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[55]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[4a]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[cb]"></a>CKCU_SetADCnPrescaler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetADCnPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKCU_SetADCnPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>

<P><STRONG><a name="[d9]"></a>CKCU_SetMIDIPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_SetMIDIPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ENGINE_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[48]"></a>CRC16</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
</UL>

<P><STRONG><a name="[96]"></a>ClearAllLED</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.ClearAllLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ClearAllLED &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>

<P><STRONG><a name="[97]"></a>ClearSingleLED</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.ClearSingleLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ClearSingleLED &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>

<P><STRONG><a name="[99]"></a>DACD16_DataSourceConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht32f5xxxx_dac_dual16.o(i.DACD16_DataSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RAMP_UP
</UL>

<P><STRONG><a name="[98]"></a>DAC_RAMP_UP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key_func.o(i.DAC_RAMP_UP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_RAMP_UP
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DACD16_DataSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, power.o(i.EVWUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EVWUP_IRQHandler &rArr; Wakeup_OtherBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_WakeupEventIntConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetWakeupFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearWakeupFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_OtherBUS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_Delay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EXTI_ClearWakeupFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearWakeupFlag))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>EXTI_GetWakeupFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetWakeupFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>EXTI_WakeupEventIntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_WakeupEventIntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>EventCmd_Beat</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Beat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Beat &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[173]"></a>EventCmd_Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, midi_decode.o(i.EventCmd_Null))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[a3]"></a>EventCmd_Pan</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Pan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Pan &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrChange
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[a5]"></a>EventCmd_Pitch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Pitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Pitch &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[a6]"></a>EventCmd_RhyReplay</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_RhyReplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_RhyReplay &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Rhy_Main_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[a8]"></a>EventCmd_Tempo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Tempo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Tempo &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Tempo
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Reset_Beat
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[ab]"></a>EventCmd_Tone</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Tone))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Tone &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[174]"></a>EventCmd_TrackEnd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, midi_decode.o(i.EventCmd_TrackEnd))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[ac]"></a>EventCmd_Vib</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Vib))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Vib &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[ad]"></a>EventCmd_Vol</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, midi_decode.o(i.EventCmd_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EventCmd_Vol &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[ae]"></a>Foot_GPIO_Setup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.Foot_GPIO_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Foot_GPIO_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>FuncKey_DemoAll</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key_func.o(i.FuncKey_DemoAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FuncKey_DemoAll &rArr; Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Stop_Midi
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_DemoCom
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
</UL>

<P><STRONG><a name="[b1]"></a>Func_DemoCom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key_func.o(i.Func_DemoCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Play_Midi
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncKey_DemoAll
</UL>

<P><STRONG><a name="[15e]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_OtherBUS
</UL>

<P><STRONG><a name="[52]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_OtherBUS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeGPIOSetup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_GPIO_Setup
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
</UL>

<P><STRONG><a name="[53]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeGPIOSetup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_GPIO_Setup
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_OpenDrainConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_OpenDrainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[b3]"></a>GPIO_PortInit</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, gpio.o(i.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GPIO_PortInit &rArr; I2C0_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeGPIOSetup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_GPIO_Setup
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_interface_configure
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModeSW
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIOCode
</UL>

<P><STRONG><a name="[15f]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_OtherBUS
</UL>

<P><STRONG><a name="[b6]"></a>GetGPIOCode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i.GetGPIOCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetGPIOCode
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>GetGameMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.GetGameMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GetGameMode &rArr; L_Audio_Play &rArr; FuncKey_DemoAll &rArr; Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>GetModeSW</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.GetModeSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetModeSW
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>GetTouchKey</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.GetTouchKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GetTouchKey &rArr; LS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Transmit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>GetVibrateCode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(i.GetVibrateCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GetVibrateCode &rArr; Vibrate_Detect &rArr; LS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Get_BLE_RX_Length</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bleuser.o(i.Get_BLE_RX_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_BLE_RX_Length
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Lenth
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>Get_DataByte</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, midi_decode.o(i.Get_DataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Midi_TimeDecode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_NotePlayDispose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vol
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vib
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tone
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tempo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_RhyReplay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pitch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pan
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Beat
</UL>

<P><STRONG><a name="[8d]"></a>Get_Valid_Lenth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, buffer.o(i.Get_Valid_Lenth))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByteExt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Retval
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BLE_RX_Length
</UL>

<P><STRONG><a name="[8a]"></a>HS_Receive</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, urbus.o(i.HS_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Multi_Rotate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSingleLED
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
</UL>

<P><STRONG><a name="[89]"></a>HS_Transmit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, urbus.o(i.HS_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HS_Transmit &rArr; Bus_Transmit &rArr; Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Multi_Rotate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSingleLED
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
</UL>

<P><STRONG><a name="[c4]"></a>HV_Transmit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, urbus.o(i.HV_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HV_Transmit &rArr; Bus_Transmit &rArr; Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>I2C0_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, i2c.o(i.I2C0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C0_Init &rArr; I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
</UL>

<P><STRONG><a name="[c6]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[c5]"></a>I2C_Init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ht32f5xxxx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[c2]"></a>IAP_Handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, iap_handler.o(i.IAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IAP_Handler &rArr; ParseCmd &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Lenth
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Discard
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>IAP_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, iap_handler.o(i.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>IAP_UART_Send</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, iap_handler.o(i.IAP_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
</UL>

<P><STRONG><a name="[b5]"></a>InterfaceADC_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, adc.o(i.InterfaceADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InterfaceADC_Init &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCnPrescaler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SamplingTimeConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
</UL>

<P><STRONG><a name="[d1]"></a>LED_Multi_Rotate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.LED_Multi_Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LED_Multi_Rotate &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>

<P><STRONG><a name="[bd]"></a>LS_Receive</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, urbus.o(i.LS_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Sensitivity_Set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Detect
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchKey
</UL>

<P><STRONG><a name="[bc]"></a>LS_Transmit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, urbus.o(i.LS_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LS_Transmit &rArr; Bus_Transmit &rArr; Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Sensitivity_Set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Detect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchKey
</UL>

<P><STRONG><a name="[d2]"></a>L_Audio_Finish</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key_func.o(i.L_Audio_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L_Audio_Finish &rArr; L_Audio_Stop &rArr; L_Midi_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_Finish
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>L_Audio_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, key_func.o(i.L_Audio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = L_Audio_Init &rArr; QSPI_MIDICTRL_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ClearFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MIDICTRL_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_DecodeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXIC_FLASH_QIOR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_IntConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ENGINE_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_DeInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CTRL_CHS
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetMIDIPrescaler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_RAMP_UP
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
</UL>

<P><STRONG><a name="[b9]"></a>L_Audio_Play</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, key_func.o(i.L_Audio_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = L_Audio_Play &rArr; FuncKey_DemoAll &rArr; Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Note_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncKey_DemoAll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sntnc_Start
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameMode
</UL>

<P><STRONG><a name="[d4]"></a>L_Audio_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key_func.o(i.L_Audio_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L_Audio_Stop &rArr; L_Midi_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Off_Note_Play
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Finish
</UL>

<P><STRONG><a name="[185]"></a>L_Audio_Vol</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, key_func.o(i.L_Audio_Vol))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>L_Func_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key_func.o(i.L_Func_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L_Func_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Vib
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Trans
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Sus
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
</UL>

<P><STRONG><a name="[d3]"></a>L_Midi_Finish</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key_func.o(i.L_Midi_Finish))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Finish
</UL>

<P><STRONG><a name="[e7]"></a>L_Midi_In_Cntrl</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, midiin.o(i.L_Midi_In_Cntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L_Midi_In_Cntrl
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Set_Sus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_In_All_Sound_Off
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[ea]"></a>L_Midi_In_Dispose</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, midiin.o(i.L_Midi_In_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = L_Midi_In_Dispose &rArr; L_Midi_In_Note_On &rArr; __L_Note_On &rArr; __l_get_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sys_Exclusive_The_TQB
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sys_Exclusive_Dispose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Pitch_Wheel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Note_On
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Next
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Learn_Note_To_Buff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Event_Finish
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Cntrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
</UL>

<P><STRONG><a name="[eb]"></a>L_Midi_In_Event_Finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, midiin.o(i.L_Midi_In_Event_Finish))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Pitch_Wheel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Note_On
</UL>

<P><STRONG><a name="[ed]"></a>L_Midi_In_Learn_Note_To_Buff</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, midiin.o(i.L_Midi_In_Learn_Note_To_Buff))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[e9]"></a>L_Midi_In_Next</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, midiin.o(i.L_Midi_In_Next))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Pitch_Wheel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Note_On
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Cntrl
</UL>

<P><STRONG><a name="[ec]"></a>L_Midi_In_Note_On</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, midiin.o(i.L_Midi_In_Note_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = L_Midi_In_Note_On &rArr; __L_Note_On &rArr; __l_get_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Note_On
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Next
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Event_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[ee]"></a>L_Midi_In_Pitch_Wheel</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, midiin.o(i.L_Midi_In_Pitch_Wheel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = L_Midi_In_Pitch_Wheel &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Next
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Event_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[e1]"></a>L_Midi_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key_func.o(i.L_Midi_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L_Midi_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Stop_Midi
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Stop
</UL>

<P><STRONG><a name="[f1]"></a>L_Sntnc_Main_Loop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, key_func.o(i.L_Sntnc_Main_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = L_Sntnc_Main_Loop &rArr; L_Sntnc_Start &rArr; L_Audio_Play &rArr; FuncKey_DemoAll &rArr; Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sntnc_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
</UL>

<P><STRONG><a name="[f2]"></a>L_Sntnc_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key_func.o(i.L_Sntnc_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = L_Sntnc_Start &rArr; L_Audio_Play &rArr; FuncKey_DemoAll &rArr; Func_DemoCom &rArr; __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sntnc_Main_Loop
</UL>

<P><STRONG><a name="[ef]"></a>L_Sys_Exclusive_Dispose</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, midiin.o(i.L_Sys_Exclusive_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = L_Sys_Exclusive_Dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[f0]"></a>L_Sys_Exclusive_The_TQB</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, midiin.o(i.L_Sys_Exclusive_The_TQB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = L_Sys_Exclusive_The_TQB
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
</UL>

<P><STRONG><a name="[f9]"></a>MIDI_CHAN</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_midi.o(i.MIDI_CHAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIDI_CHAN
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[f3]"></a>MIDI_CHx_NOTE</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, midi_decode.o(i.MIDI_CHx_NOTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_VOL
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_STADDR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_RENUM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FREQ
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ENDADDR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHAN
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>

<P><STRONG><a name="[dc]"></a>MIDI_CTRL_CHS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_CTRL_CHS))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[106]"></a>MIDI_CTRL_SPIDISLOOPCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_CTRL_SPIDISLOOPCmd))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>

<P><STRONG><a name="[105]"></a>MIDI_CTRL_SPIRDENCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_CTRL_SPIRDENCmd))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>

<P><STRONG><a name="[dd]"></a>MIDI_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[da]"></a>MIDI_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_midi.o(i.MIDI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MIDI_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[f8]"></a>MIDI_ENDADDR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_ENDADDR))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[db]"></a>MIDI_ENGINE_Init</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, midi_decode.o(i.MIDI_ENGINE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MIDI_ENGINE_Init &rArr; MIDI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetMIDIPrescaler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[f4]"></a>MIDI_FREQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_FREQ))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[fc]"></a>MIDI_FuncInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key_func.o(i.MIDI_FuncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MIDI_FuncInit &rArr; L_Audio_Init &rArr; QSPI_MIDICTRL_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_GPIOConfiguration
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Func_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>MIDI_GPIOConfiguration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, key_func.o(i.MIDI_GPIOConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MIDI_GPIOConfiguration &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
</UL>

<P><STRONG><a name="[1a]"></a>MIDI_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.MIDI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIDI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_It_Spi_Data_Judge
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>MIDI_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ht32f5xxxx_midi.o(i.MIDI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIDI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_ENGINE_Init
</UL>

<P><STRONG><a name="[de]"></a>MIDI_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[100]"></a>MIDI_NotePlayDispose</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, midi_decode.o(i.MIDI_NotePlayDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Note_On
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Before_Note_Play
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[c3]"></a>MIDI_Procrss</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key_func.o(i.MIDI_Procrss))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Sntnc_Main_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MIDI_RENUM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_RENUM))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[104]"></a>MIDI_SPIDATA_Read</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, midi_decode.o(i.MIDI_SPIDATA_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Delay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CTRL_SPIRDENCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CTRL_SPIDISLOOPCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_Single_2byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_32byte
</UL>

<P><STRONG><a name="[f6]"></a>MIDI_STADDR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_midi.o(i.MIDI_STADDR))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[f5]"></a>MIDI_VOL</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_midi.o(i.MIDI_VOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MIDI_VOL
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_CHx_NOTE
</UL>

<P><STRONG><a name="[d7]"></a>MXIC_FLASH_QIOR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, qspi_midictrl.o(i.MXIC_FLASH_QIOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXIC_FLASH_QIOR &rArr; QSPI_FLASH_WRR &rArr; QSPI_FLASH_WaitForWriteEnd &rArr; QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[a4]"></a>Midi_AddrChange</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, midi_decode.o(i.Midi_AddrChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Midi_AddrChange &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_32byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pan
</UL>

<P><STRONG><a name="[a1]"></a>Midi_AddrInc</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, midi_decode.o(i.Midi_AddrInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_32byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Midi_TimeDecode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_NotePlayDispose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vol
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vib
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tone
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tempo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_RhyReplay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pitch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pan
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Beat
</UL>

<P><STRONG><a name="[12d]"></a>Midi_Beat48_Counter</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, midi_decode.o(i.Midi_Beat48_Counter))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[df]"></a>Midi_DecodeInit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, midi_decode.o(i.Midi_DecodeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Midi_DecodeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_TrackDataInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_FlagInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Play_Midi
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[171]"></a>Midi_DecodeNextTrack</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, midi_decode.o(i.Midi_DecodeNextTrack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Midi_DecodeNextTrack
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[10c]"></a>Midi_End</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, midi_decode.o(i.Midi_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Midi_End
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Midi_End
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[10b]"></a>Midi_FlagInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, midi_decode.o(i.Midi_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_DecodeInit
</UL>

<P><STRONG><a name="[10a]"></a>Midi_TrackDataInit</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, midi_decode.o(i.Midi_TrackDataInit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_DecodeInit
</UL>

<P><STRONG><a name="[10e]"></a>ModeGPIOSetup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.ModeGPIOSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModeGPIOSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_func.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
</UL>

<P><STRONG><a name="[1d]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PDMA_CH0_1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PDMA_CH2_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>ParseCmd</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, iap_handler.o(i.ParseCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ParseCmd &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>QSPI_FLASH_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, qspi_flash.o(i.QSPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QSPI_FLASH_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[115]"></a>QSPI_FLASH_SendByte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, qspi_flash.o(i.QSPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WREN
</UL>

<P><STRONG><a name="[119]"></a>QSPI_FLASH_WREN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, qspi_flash.o(i.QSPI_FLASH_WREN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_FLASH_WREN &rArr; QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SoftwareSELCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
</UL>

<P><STRONG><a name="[108]"></a>QSPI_FLASH_WRR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qspi_flash.o(i.QSPI_FLASH_WRR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QSPI_FLASH_WRR &rArr; QSPI_FLASH_WaitForWriteEnd &rArr; QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SoftwareSELCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WREN
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXIC_FLASH_QIOR
</UL>

<P><STRONG><a name="[11b]"></a>QSPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, qspi_flash.o(i.QSPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_FLASH_WaitForWriteEnd &rArr; QSPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_SoftwareSELCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
</UL>

<P><STRONG><a name="[17]"></a>QSPI_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ht32f5xxxx_01_it.o(i.QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>QSPI_MIDICTRL_Init</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, qspi_midictrl.o(i.QSPI_MIDICTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = QSPI_MIDICTRL_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DUALCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Init
</UL>

<P><STRONG><a name="[11a]"></a>QSPI_SoftwareSELCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qspi_flash.o(i.QSPI_SoftwareSELCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WaitForWriteEnd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WRR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WREN
</UL>

<P><STRONG><a name="[187]"></a>QueueInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.QueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>QueuePop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.QueuePop))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>

<P><STRONG><a name="[11e]"></a>QueueProcess</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, main.o(i.QueueProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = QueueProcess &rArr; BeatLEDControl &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Multi_Rotate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSingleLED
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TapModeProcess
</UL>

<P><STRONG><a name="[131]"></a>QueuePush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.QueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TapModeProcess
</UL>

<P><STRONG><a name="[120]"></a>RETARGET_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32_retarget.o(i.RETARGET_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RETARGET_Configuration &rArr; SERIAL_USBDInit &rArr; USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>RSTCU_PeripReset</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ht32f5xxxx_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_DeInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DeInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[f]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sys_timer.o(i.SCTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetFlagStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sys_timer.o(i.SCTM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCTM1_IRQHandler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetFlagStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>SERIAL_Flush</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SERIAL_Flush &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>

<P><STRONG><a name="[c9]"></a>SERIAL_PutChar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ht32_serial.o(i.SERIAL_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
</UL>

<P><STRONG><a name="[24]"></a>SERIAL_USBDClass_RXHandler</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, ht32_serial.o(i.SERIAL_USBDClass_RXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SERIAL_USBDClass_RXHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[23]"></a>SERIAL_USBDClass_Request</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ht32_serial.o(i.SERIAL_USBDClass_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SERIAL_USBDClass_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_serial.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[121]"></a>SERIAL_USBDInit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ht32_serial.o(i.SERIAL_USBDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SERIAL_USBDInit &rArr; USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDesc_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
</UL>

<P><STRONG><a name="[114]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MIDICTRL_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[11d]"></a>SPI_DUALCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_DUALCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MIDICTRL_Init
</UL>

<P><STRONG><a name="[116]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[112]"></a>SPI_Init</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ht32f5xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MIDICTRL_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[11c]"></a>SPI_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>SPI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[113]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_MIDICTRL_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[117]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[67]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_TEMPO_Config
</UL>

<P><STRONG><a name="[110]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[68]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_TEMPO_Config
</UL>

<P><STRONG><a name="[71]"></a>SetBLEName</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.SetBLEName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetBLEName &rArr; BLE_Set_Name &rArr; BC76xxSPI_write_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Set_Name
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CustomInit
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_Beat48_Counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, system_ht32f0006.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>System_Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.System_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = System_Reset &rArr; HV_Transmit &rArr; Bus_Transmit &rArr; Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>TM_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM0_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>TM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[12f]"></a>TM_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ht32f5xxxx_tm.o(i.TM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[122]"></a>TM_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCTM0_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>TM_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[133]"></a>TM_TimeBaseInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ht32f5xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[130]"></a>TapModeProcess</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, main.o(i.TapModeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TapModeProcess &rArr; QueueProcess &rArr; BeatLEDControl &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>Timer_Init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sys_timer.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Timer_Init &rArr; TM_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IntConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_DeInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, urbus.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART0_IRQHandler &rArr; Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>URBus_Init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, urbus.o(i.URBus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = URBus_Init &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OpenDrainConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_OneShotModeCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>USART0_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, urbus.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART0_IRQHandler &rArr; Buffer_Write &rArr; Buffer_WriteByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>USART_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[13d]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[137]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>USART_TxRxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send_Buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
</UL>

<P><STRONG><a name="[129]"></a>USBDClass_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32_serial.o(i.USBDClass_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDClass_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[13f]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBDCore_IRQHandler &rArr; _USBDCore_Setup &rArr; _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>USBDCore_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ht32_usbd_core.o(i.USBDCore_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[12c]"></a>USBDCore_MainRoutine</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ht32_usbd_core.o(i.USBDCore_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[128]"></a>USBDDesc_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_serial.o(i.USBDDesc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[141]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>USBD_DPWakeUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_DPWakeUpCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[12b]"></a>USBD_DPpullupCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_DPpullupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[143]"></a>USBD_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[151]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[14a]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[153]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[154]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[155]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[147]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[145]"></a>USBD_EPTInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[157]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[126]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDClass_RXHandler
</UL>

<P><STRONG><a name="[156]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[159]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[15a]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[125]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ht32f5xxxx_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_Flush
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>

<P><STRONG><a name="[146]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USBD_GetINT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>USBD_Init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ht32f5xxxx_usbd.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
</UL>

<P><STRONG><a name="[142]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>USBD_PowerOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>USBD_PowerUp</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(i.USBD_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPWakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
</UL>

<P><STRONG><a name="[15b]"></a>USBD_PreInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_PreInit))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[148]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[1c]"></a>USB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ht32_serial.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; _USBDCore_Setup &rArr; _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Uart_Send_Buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, urbus.o(i.Uart_Send_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Transmit
</UL>

<P><STRONG><a name="[91]"></a>Uart_Send_Data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, urbus.o(i.Uart_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_Transmit
</UL>

<P><STRONG><a name="[64]"></a>User_TimerInterrupt_2ms</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer.o(i.User_TimerInterrupt_2ms))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>Vibrate_Detect</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Vibrate_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Vibrate_Detect &rArr; LS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Transmit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVibrateCode
</UL>

<P><STRONG><a name="[15d]"></a>Vibrate_Sensitivity_Set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.Vibrate_Sensitivity_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Vibrate_Sensitivity_Set &rArr; LS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Transmit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>WDT_Restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_wdt.o(i.WDT_Restart))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[88]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Sensitivity_Set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Detect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBLEName
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Multi_Rotate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchKey
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearSingleLED
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
</UL>

<P><STRONG><a name="[84]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Dispose
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>

<P><STRONG><a name="[107]"></a>__L_Channel_Delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, channel_dispose.o(i.__L_Channel_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_First_Dispose
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>

<P><STRONG><a name="[166]"></a>__L_Channel_First_Dispose</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, channel_dispose.o(i.__L_Channel_First_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __L_Channel_First_Dispose &rArr; __L_channel_envelope_total
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_get_low_low_nibble
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_get_low_high_nibble
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_channel_envelope_total
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[17e]"></a>__L_Channel_Note_Attack</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, channel_dispose.o(i.__L_Channel_Note_Attack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __L_Channel_Note_Attack
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[17f]"></a>__L_Channel_Note_Decay</STRONG> (Thumb, 586 bytes, Stack size 44 bytes, channel_dispose.o(i.__L_Channel_Note_Decay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __L_Channel_Note_Decay
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[16a]"></a>__L_Channel_Note_Release</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, channel_dispose.o(i.__L_Channel_Note_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __L_Channel_Note_Release
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_get_high_high_nibble
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[109]"></a>__L_Get_Flash_32byte</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, midi_decode.o(i.__L_Get_Flash_32byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Play_Midi
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrChange
</UL>

<P><STRONG><a name="[16c]"></a>__L_Get_Flash_Single_2byte</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, midi_decode.o(i.__L_Get_Flash_Single_2byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __L_Get_Flash_Single_2byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_SPIDATA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Play_Midi
</UL>

<P><STRONG><a name="[ff]"></a>__L_It_Spi_Data_Judge</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, midi_decode.o(i.__L_It_Spi_Data_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>__L_Midi_Decode</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, midi_decode.o(i.__L_Midi_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Midi_TimeDecode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Midi_Event_Decode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Time_Count
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Beat_Count
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_End
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_DecodeNextTrack
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
</UL>

<P><STRONG><a name="[172]"></a>__L_Midi_Event_Dispose</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, midi_decode.o(i.__L_Midi_Event_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_NotePlayDispose
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vol
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Vib
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_TrackEnd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tone
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tempo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_RhyReplay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pitch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Pan
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Null
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Beat
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Midi_Event_Decode
</UL>

<P><STRONG><a name="[e8]"></a>__L_Midi_In_All_Sound_Off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_Midi_In_All_Sound_Off))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Cntrl
</UL>

<P><STRONG><a name="[e0]"></a>__L_Note_On</STRONG> (Thumb, 536 bytes, Stack size 80 bytes, channel_dispose.o(i.__L_Note_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __L_Note_On &rArr; __l_get_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Note_On
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_NotePlayDispose
</UL>

<P><STRONG><a name="[e2]"></a>__L_Off_Note_Play</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, channel_dispose.o(i.__L_Off_Note_Play))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Stop
</UL>

<P><STRONG><a name="[b2]"></a>__L_Play_Midi</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, midi_decode.o(i.__L_Play_Midi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __L_Play_Midi &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_DecodeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Reset_Beat
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_Single_2byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Get_Flash_32byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_DemoCom
</UL>

<P><STRONG><a name="[aa]"></a>__L_Reset_Beat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, midi_decode.o(i.__L_Reset_Beat))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Play_Midi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tempo
</UL>

<P><STRONG><a name="[e6]"></a>__L_Set_Sus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, channel_dispose.o(i.__L_Set_Sus))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Func_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_In_Cntrl
</UL>

<P><STRONG><a name="[a9]"></a>__L_Set_Tempo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, midi_decode.o(i.__L_Set_Tempo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __L_Set_Tempo &rArr; BFTM1_TEMPO_Config &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM1_TEMPO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_Tempo
</UL>

<P><STRONG><a name="[e5]"></a>__L_Set_Trans</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, channel_dispose.o(i.__L_Set_Trans))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Func_Init
</UL>

<P><STRONG><a name="[e4]"></a>__L_Set_Vib</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, channel_dispose.o(i.__L_Set_Vib))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Func_Init
</UL>

<P><STRONG><a name="[b0]"></a>__L_Stop_Midi</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, midi_decode.o(i.__L_Stop_Midi))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Midi_Stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuncKey_DemoAll
</UL>

<P><STRONG><a name="[16d]"></a>__L_Sys_Beat_Count</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, midi_decode.o(i.__L_Sys_Beat_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __L_Sys_Beat_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Measure_Finish
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Half_Beat_Finish
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_Beat_Finish
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_1_48Beat
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[16e]"></a>__L_Sys_Time_Count</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, midi_decode.o(i.__L_Sys_Time_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __L_Sys_Time_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_User_2ms_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[176]"></a>__L_User_1_48Beat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_1_48Beat))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Beat_Count
</UL>

<P><STRONG><a name="[17a]"></a>__L_User_2ms_Count</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_2ms_Count))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Time_Count
</UL>

<P><STRONG><a name="[178]"></a>__L_User_Beat_Finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Beat_Finish))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Beat_Count
</UL>

<P><STRONG><a name="[101]"></a>__L_User_Before_Note_Play</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Before_Note_Play))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_NotePlayDispose
</UL>

<P><STRONG><a name="[179]"></a>__L_User_Half_Beat_Finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Half_Beat_Finish))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Beat_Count
</UL>

<P><STRONG><a name="[177]"></a>__L_User_Measure_Finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Measure_Finish))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Sys_Beat_Count
</UL>

<P><STRONG><a name="[10d]"></a>__L_User_Midi_End</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Midi_End))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_End
</UL>

<P><STRONG><a name="[a7]"></a>__L_User_Rhy_Main_Start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user_midi_subr.o(i.__L_User_Rhy_Main_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCmd_RhyReplay
</UL>

<P><STRONG><a name="[169]"></a>__L_channel_envelope_total</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, channel_dispose.o(i.__L_channel_envelope_total))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __L_channel_envelope_total
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_vol_overflow_judge
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_get_pan_right_vol
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_get_pan_left_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_First_Dispose
</UL>

<P><STRONG><a name="[170]"></a>__Midi_Event_Decode</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, midi_decode.o(i.__Midi_Event_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Event_Dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[16f]"></a>__Midi_TimeDecode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, midi_decode.o(i.__Midi_TimeDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __Midi_TimeDecode &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Midi_AddrInc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Midi_Decode
</UL>

<P><STRONG><a name="[181]"></a>__l_calculate_freq</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, channel_dispose.o(i.__l_calculate_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __l_calculate_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[103]"></a>__l_channel_dispose</STRONG> (Thumb, 474 bytes, Stack size 44 bytes, channel_dispose.o(i.__l_channel_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __l_channel_dispose &rArr; __L_Channel_First_Dispose &rArr; __L_channel_envelope_total
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_get_low_high_nibble
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_get_high_low_nibble
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_calculate_freq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_channel_envelope_total
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Note_Release
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Note_Decay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Note_Attack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_First_Dispose
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
</UL>

<P><STRONG><a name="[175]"></a>__l_get_channel</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, channel_dispose.o(i.__l_get_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __l_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Note_On
</UL>

<P><STRONG><a name="[17b]"></a>__l_get_pan_left_vol</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, channel_dispose.o(i.__l_get_pan_left_vol))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_channel_envelope_total
</UL>

<P><STRONG><a name="[17c]"></a>__l_get_pan_right_vol</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, channel_dispose.o(i.__l_get_pan_right_vol))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_channel_envelope_total
</UL>

<P><STRONG><a name="[17d]"></a>__l_vol_overflow_judge</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, channel_dispose.o(i.__l_vol_overflow_judge))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_channel_envelope_total
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[58]"></a>delay_10us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bc76xx.o(i.delay_10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_power_mode
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76xx_multibyte_write
</UL>

<P><STRONG><a name="[4e]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bc76xx.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_ms &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
</UL>

<P><STRONG><a name="[16b]"></a>l_get_high_high_nibble</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, channel_dispose.o(i.l_get_high_high_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_Note_Release
</UL>

<P><STRONG><a name="[180]"></a>l_get_high_low_nibble</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, channel_dispose.o(i.l_get_high_low_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
</UL>

<P><STRONG><a name="[168]"></a>l_get_low_high_nibble</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, channel_dispose.o(i.l_get_low_high_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__l_channel_dispose
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_First_Dispose
</UL>

<P><STRONG><a name="[167]"></a>l_get_low_low_nibble</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, channel_dispose.o(i.l_get_low_low_nibble))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__L_Channel_First_Dispose
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 1000 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = main &rArr; TapModeProcess &rArr; QueueProcess &rArr; BeatLEDControl &rArr; HS_Receive &rArr; MIDI_Procrss &rArr; __L_Midi_Decode &rArr; __Midi_Event_Decode &rArr; __L_Midi_Event_Dispose &rArr; MIDI_NotePlayDispose &rArr; Midi_AddrInc &rArr; __L_Get_Flash_32byte &rArr; MIDI_SPIDATA_Read &rArr; MIDI_CHx_NOTE &rArr; MIDI_VOL
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Restart
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_Procrss
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIDI_FuncInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Vol
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Play
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Audio_Finish
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BLE_RX_Length
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_process
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Read_Buffer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Up
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Power_Down
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC76XX_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vibrate_Sensitivity_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TapModeProcess
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Reset
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueuePush
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcess
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeGPIOSetup
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Multi_Rotate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVibrateCode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchKey
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModeSW
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGameMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIOCode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foot_GPIO_Setup
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAllLED
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeatLEDControl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IsConnected
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CustomInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[47]"></a>AdjustReturnPackage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, iap_handler.o(i.AdjustReturnPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AdjustReturnPackage &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IAP_Reset
</UL>

<P><STRONG><a name="[28]"></a>_IAP_CMD0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_CMD0))
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>_IAP_CMD_ERR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_CMD_ERR))
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>_IAP_GetBootMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_GetBootMode))
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>_IAP_Info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iap_handler.o(i._IAP_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _IAP_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>_IAP_Reset</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, iap_handler.o(i._IAP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _IAP_Reset &rArr; IAP_UART_Send &rArr; SERIAL_PutChar &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_UART_Send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustReturnPackage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap_handler.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[149]"></a>_USBDCore_Setup</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _USBDCore_Setup &rArr; _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[160]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_Request &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Setup
</UL>

<P><STRONG><a name="[162]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[90]"></a>Bus_Transmit</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, urbus.o(i.Bus_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bus_Transmit &rArr; Uart_Send_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HV_Transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Transmit
</UL>

<P><STRONG><a name="[13a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, urbus.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URBus_Init
</UL>

<P><STRONG><a name="[111]"></a>Parse_Retval</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, urbus.o(i.Parse_Retval))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Parse_Retval &rArr; Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Lenth
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UR_Bus_Receive
</UL>

<P><STRONG><a name="[c1]"></a>UR_Bus_Receive</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, urbus.o(i.UR_Bus_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UR_Bus_Receive &rArr; Parse_Retval &rArr; Buffer_Read &rArr; Buffer_ReadByte &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Valid_Lenth
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByteExt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Discard
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Retval
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LS_Receive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HS_Receive
</UL>

<P><STRONG><a name="[9f]"></a>Wakeup_Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, power.o(i.Wakeup_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_OtherBUS
</UL>

<P><STRONG><a name="[9d]"></a>Wakeup_OtherBUS</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, power.o(i.Wakeup_OtherBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wakeup_OtherBUS
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wakeup_Delay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVWUP_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ht32_serial.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_USBDInit
</UL>

<P><STRONG><a name="[158]"></a>_USBD_CopyMemory</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, ht32f5xxxx_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[150]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
</UL>

<P><STRONG><a name="[165]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[183]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
